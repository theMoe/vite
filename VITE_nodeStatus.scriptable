{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "yellow",
    "glyph" : "magic"
  },
  "name" : "VITE_nodeStatus",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: magic;\n\nconst urlGetAlivePeers = (viteAddress) => `https:\/\/stats.vite.net\/api\/getAlivePeers?address=vite_adress`\n\/\/ ${encodeURIComponent(viteAddress)}`\n\nconst nodeDetail = [['x.x.x.ip1', 'nodeName1'],['...', '....']]\n\nlet widget = await createWidget()\nif (!config.runsInWidget) {\n  await widget.presentSmall()\n}\n\nScript.setWidget(widget)\nScript.complete()\n\nasync function createWidget(items) {\n  let viteAddress\n  \n  if(args.widgetParameter) {\n    console.log('get fixed lat\/lon')\n    const fixedAdr = args.widgetParameter.split(\",\").map(parseFloat)\n    viteAddress = {\n      addr: fixedAdr[0]\n    }\n  } else {\n    viteAddress = 'viteAdress...'\n  }\n  console.log(urlGetAlivePeers(viteAddress))\n  \n\/\/   const data = await new Request(urlGetAlivePeers(viteAddress)).loadJSON()\n\/\/   let req = new Request(urlGetAlivePeers(viteAddress))\n\/\/   req.method = \"GET\"\n\/\/   const data = await req.loadJSON()\n\/\/   console.log(data)\n\n\/\/   const size = data.size\n  \n  const list = new ListWidget()\n  const header = list.addText(\"Vite Nodes ðŸŒ–\")\n  header.font = Font.mediumSystemFont(13)\n  \n  list.addSpacer(5)\n  \n  for (i = 0; i < nodeDetail.length; i++) {\n    const ip = nodeDetail[i][0]\n    const name = nodeDetail[i][1]\n\/\/     console.log(nodeDetail[i])\n\/\/     console.log(\"http:\/\/\" + ip + \":48132\")\n  let req2 = new Request(\"http:\/\/\" + ip + \":48132\")\n  req2.allowInsecureRequest = true\n  req2.method = \"POST\"\n  req2.headers = {\n    \"Cache-Control\": \"no-cache\",\n    \"Content-Type\": \"application\/json\"\n    }\n  req2.body = JSON.stringify({\n    \"jsonrpc\": \"2.0\",\n    \"id\": 2,\n    \"method\": \"ledger_getSnapshotChainHeight\",\n    \"params\": null\n    })\n  const data2 = await req2.loadJSON()\n  if (!data2) {\n    let lT = list.addText(name + \": offline\")\n  lT.font = Font.mediumSystemFont(10)\n  } else {\n  let lT = list.addText(name + \": \" + data2.result)\n  lT.font = Font.mediumSystemFont(10)\n}\n  }\n  \n\/\/   if(!data || !data.list|| !data.list.length) {\n\/\/     const errorList = new ListWidget()\n\/\/     errorList.addText(\"Keine Ergebnisse von GetAlivePeers\")\n\/\/     return errorList\n\/\/   }\n  \n\/\/   for (node in data.list) {\n\/\/   for (i = 0; i < data.list.length; i++) {\n\/\/     list.addText(data.list[i].nodeName + \": \" + data.list[i].isAlive)\n\/\/   }\n\n  return list\n}",
  "share_sheet_inputs" : [

  ]
}