{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "yellow",
    "glyph" : "magic"
  },
  "name" : "Vite_Clean",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: deep-gray; icon-glyph: magic;\n\nconst urlGetAlivePeers = (viteAddress) => `https:\/\/stats.vite.net\/api\/getAlivePeers?address=vite_adress`\n\/\/ ${encodeURIComponent(viteAddress)}`\nconst urlCycles = 'https:\/\/rewardapi.vite.net\/reward\/full\/real?cycle='\nconst fontSize = 7\nconst loadCycleOnlineRatio = true\n\nconst nodeDetail = [['xx.xx.xx.ip1', 'node1'],['...', '...']]\nfunction saveCycle(cycleData) {\n  let fm = FileManager.iCloud()\n  let path = fm.joinPath(fm.documentsDirectory(), \"cycleData.json\")\n  fm.writeString(path, JSON.stringify(cycleData))\n}\n\nfunction getCycle() {\n  let fm = FileManager.iCloud()\n  let path = fm.joinPath(fm.documentsDirectory(), \"cycleData.json\")\n  if (fm.fileExists(path) == true) {\n    let data = fm.readString(path)\n    return JSON.parse(data)\n  } else {\n    return null\n  }\n}\n\nlet widget = await createWidget()\nif (!config.runsInWidget) {\n  await widget.presentSmall()\n}\n\nScript.setWidget(widget)\nScript.complete()\n\nasync function createWidget(items) {\n  let viteAddress\n  const cycle_incomplete=Math.floor(((Date.now() \/ 1000) - 1558411200) \/ 24 \/ 3600)\n  const cycle = cycle_incomplete - 1\n  \n  if(args.widgetParameter) {\n    console.log('get fixed lat\/lon')\n    const fixedAdr = args.widgetParameter.split(\",\").map(parseFloat)\n    viteAddress = {\n      addr: fixedAdr[0]\n    }\n  } else {\n    viteAddress = 'viteAdress...'\n  }\n  console.log(urlGetAlivePeers(viteAddress))\n  \n\/\/   const data = await new Request(urlGetAlivePeers(viteAddress)).loadJSON()\n\/\/   let req = new Request(urlGetAlivePeers(viteAddress))\n\/\/   req.method = \"GET\"\n\/\/   const data = await req.loadJSON()\n\/\/   console.log(data)\n\n\/\/   const size = data.size\n  \n  const list = new ListWidget()\n  const header = list.addText(\"Vite Nodes ðŸŒ–\")\n  header.font = Font.mediumSystemFont(13)\n  \n  if (loadCycleOnlineRatio) {\n    let cD = getCycle()\n    let lJ\n    var cycleData = {}\n    if (cD == null) {\n      lJ = true\n    } else if (cD['cycle'] != cycle) {\n      lJ = true\n    } else {\n      lJ = false\n      cycleData = cD\n    }\n    \n    \n    if (lJ) {\n      let data0 = {}\n      let req0 = new Request(urlCycles + cycle)\n      req0.method = \"GET\"\n\/\/   let data0 = null\n      try {\n        data0 = await req0.loadJSON()\n      } catch (error) {\n        data0 = null\n      }\n  \/\/   console.log(data0)\n      \n      for (data in data0.data) {\n        if (data0.data[data].address == viteAddress) {\n  \/\/       console.log(data0.data[data].onlineRatio)\n          cycleData[data0.data[data].ip] = (data0.data[data].onlineRatio).toFixed(3)\n        }\n      }\n      cycleData['cycle'] = cycle\n      saveCycle(cycleData)\n    }\n  }\n  list.addSpacer(5)\n  \n  for (i = 0; i < nodeDetail.length; i++) {\n    const ip = nodeDetail[i][0]\n    const name = nodeDetail[i][1]\n    \n    var onlineRatio = ''\n    if (loadCycleOnlineRatio) {\n    if (cycleData[ip] != false) {\n      onlineRatio = ' (' + cycleData[ip] + ')'\n    }\n  }\n\/\/     console.log(nodeDetail[i])\n\n\/\/     console.log(\"http:\/\/\" + ip + \":48132\")\n    let req2 = new Request(\"http:\/\/\" + ip + \":48132\")\n    req2.allowInsecureRequest = true\n    req2.method = \"POST\"\n    req2.headers = {\n      \"Cache-Control\": \"no-cache\",\n      \"Content-Type\": \"application\/json\"\n    }\n    req2.body = JSON.stringify({\n      \"jsonrpc\": \"2.0\",\n      \"id\": 2,\n      \"method\": \"ledger_getSnapshotChainHeight\",\n      \"params\": null\n    })\n    try {\n      const data2 = await req2.loadJSON()\n  \n      if (!data2) {\n        let lT = list.addText(name + \": offline\" + onlineRatio)\n        lT.font = Font.regularMonospacedSystemFont(fontSize)\n      } else {\n        let lT = list.addText(name + \": \" + Number(data2.result).toLocaleString() + onlineRatio)\n        lT.font = Font.regularMonospacedSystemFont(fontSize)\n      }\n    } catch (error) {\n\/\/   console.error(error)\n      let lT = list.addText(name + \": offline\" + onlineRatio)\n      lT.font = Font.regularMonospacedSystemFont(fontSize)\n    }\n  }\n  \n\/\/   if(!data || !data.list|| !data.list.length) {\n\/\/     const errorList = new ListWidget()\n\/\/     errorList.addText(\"Keine Ergebnisse von GetAlivePeers\")\n\/\/     return errorList\n\/\/   }\n  \n\/\/   for (node in data.list) {\n\/\/   for (i = 0; i < data.list.length; i++) {\n\/\/     list.addText(data.list[i].nodeName + \": \" + data.list[i].isAlive)\n\/\/   }\n\n  return list\n}",
  "share_sheet_inputs" : [

  ]
}